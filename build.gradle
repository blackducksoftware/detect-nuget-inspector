buildscript {
    apply from: 'https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-repositories.gradle', to: buildscript
    apply from: 'https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-cgp-version.gradle'

    dependencies {
        classpath "com.synopsys.integration:common-gradle-plugin:${managedCgpVersion}"
    }
}

ext.dotNetExec = project.hasProperty('dotNetExec') ? project.getProperty('dotNetExec') : 'dotnet6'

group 'com.synopsys.integration'
version = '1.0.0-SNAPSHOT'

apply plugin: 'com.synopsys.integration.solution'

project.tasks.create(name: 'buildSolutions') {
    group 'dotnet build'
    description 'Build executable for all defined operating systems'
}

project.tasks.create(name: 'zipSolutions') {
    group 'dotnet build'
    description 'Build executable and create zip files for all defined operating systems'
    dependsOn buildSolutions
}

HashMap<String, String> dotNetSolutions = ['mac': 'osx-x64', 'windows': 'win-x64', 'linux': 'linux-x64', 'dana': 'dana']

dotNetSolutions.each { os, buildCmd ->
    String buildTaskName = "${os}BuildSolution"
    String buildOutputDir = "build/tmp/${os}-build"
    project.tasks.create(name: buildTaskName, type: Exec) {
        group 'dotnet build'
        description "Create executable for ${os} in directory : ${buildOutputDir}"

        def buildCommand = [dotNetExec, 'publish', 'detect-nuget-inspector/detect-nuget-inspector.sln', '-r', "${buildCmd}", '-o', buildOutputDir, '--force']
        commandLine buildCommand

        doFirst {
            logger.lifecycle("Running ${dotNetExec} for OS '${os}':: " + buildCommand.toString())
        }
        doLast {
            logger.lifecycle("Output of ${dotNetExec} for OS '${os}' located at:: " + buildOutputDir)
        }

    }
    project.tasks.findByName('buildSolutions').dependsOn buildTaskName

    String zipTaskName = "${os}Zip"
    String outputZipFileName = "${project.name}-${os}-${version}.zip"
    String outputZipDirectory = 'build/libs/'
    project.tasks.create(name: zipTaskName, type: Zip) {
        group 'dotnet build'
        description "Create zip for ${os} : ${outputZipDirectory}/${outputZipFileName}"
        from buildOutputDir
        include '*'
        archiveName outputZipFileName
        destinationDir(file(outputZipDirectory))

        doFirst {
            logger.lifecycle("Zipping contents of ${buildOutputDir} for OS '${os}':: " + outputZipDirectory + outputZipFileName)
        }
    }
    project.tasks.findByName(zipTaskName).dependsOn buildTaskName
    project.tasks.findByName('zipSolutions').dependsOn zipTaskName
}